/* eslint-disable */

// source: Protocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Protocol.DaemonMeta', null, global);
goog.exportSymbol('proto.Protocol.DaemonStatus', null, global);
goog.exportSymbol('proto.Protocol.UnitNetworkCounter', null, global);
goog.exportSymbol('proto.Protocol.UnitProcess', null, global);
goog.exportSymbol('proto.Protocol.UnitSettings', null, global);
goog.exportSymbol('proto.Protocol.UnitStatus', null, global);
goog.exportSymbol('proto.Protocol.WebSocketClientRequestFetchDaemonMeta', null, global);
goog.exportSymbol('proto.Protocol.WebSocketClientRequestFetchDaemonStatus', null, global);
goog.exportSymbol('proto.Protocol.WebSocketClientRequestFetchUnitStatus', null, global);
goog.exportSymbol('proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter', null, global);
goog.exportSymbol('proto.Protocol.WebSocketClientRequestFetchUnitsStatus', null, global);
goog.exportSymbol('proto.Protocol.WebSocketClientRequestReloadUnitSettings', null, global);
goog.exportSymbol('proto.Protocol.WebSocketClientRequestReloadUnitsSettings', null, global);
goog.exportSymbol('proto.Protocol.WebSocketClientRequestStartUnit', null, global);
goog.exportSymbol('proto.Protocol.WebSocketClientRequestStartUnits', null, global);
goog.exportSymbol('proto.Protocol.WebSocketClientRequestStopUnit', null, global);
goog.exportSymbol('proto.Protocol.WebSocketClientRequestStopUnits', null, global);
goog.exportSymbol('proto.Protocol.WebSocketClientRequestValidateControlKey', null, global);
goog.exportSymbol('proto.Protocol.WebSocketPacketTest', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerResponseAfterOnOpen', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerResponseFetchDaemonMeta', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerResponseFetchDaemonStatus', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerResponseFetchUnitStatus', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerResponseFetchUnitsStatus', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerResponseReloadUnitSettings', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerResponseReloadUnitsSettings', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerResponseStartUnit', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerResponseStartUnits', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerResponseStopUnit', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerResponseStopUnits', null, global);
goog.exportSymbol('proto.Protocol.WebSocketServerResponseValidateControlKey', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.DaemonMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.DaemonMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.DaemonMeta.displayName = 'proto.Protocol.DaemonMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.DaemonStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.DaemonStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.DaemonStatus.displayName = 'proto.Protocol.DaemonStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.UnitSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.UnitSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.UnitSettings.displayName = 'proto.Protocol.UnitSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.UnitProcess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.UnitProcess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.UnitProcess.displayName = 'proto.Protocol.UnitProcess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.UnitNetworkCounter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.UnitNetworkCounter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.UnitNetworkCounter.displayName = 'proto.Protocol.UnitNetworkCounter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.UnitStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.UnitStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.UnitStatus.displayName = 'proto.Protocol.UnitStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketPacketTest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketPacketTest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketPacketTest.displayName = 'proto.Protocol.WebSocketPacketTest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerResponseAfterOnOpen = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketServerResponseAfterOnOpen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerResponseAfterOnOpen.displayName = 'proto.Protocol.WebSocketServerResponseAfterOnOpen';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketClientRequestValidateControlKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketClientRequestValidateControlKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketClientRequestValidateControlKey.displayName = 'proto.Protocol.WebSocketClientRequestValidateControlKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerResponseValidateControlKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketServerResponseValidateControlKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerResponseValidateControlKey.displayName = 'proto.Protocol.WebSocketServerResponseValidateControlKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketClientRequestFetchDaemonMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketClientRequestFetchDaemonMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketClientRequestFetchDaemonMeta.displayName = 'proto.Protocol.WebSocketClientRequestFetchDaemonMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerResponseFetchDaemonMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketServerResponseFetchDaemonMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerResponseFetchDaemonMeta.displayName = 'proto.Protocol.WebSocketServerResponseFetchDaemonMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketClientRequestFetchDaemonStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketClientRequestFetchDaemonStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketClientRequestFetchDaemonStatus.displayName = 'proto.Protocol.WebSocketClientRequestFetchDaemonStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerResponseFetchDaemonStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketServerResponseFetchDaemonStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerResponseFetchDaemonStatus.displayName = 'proto.Protocol.WebSocketServerResponseFetchDaemonStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketClientRequestFetchUnitsStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketClientRequestFetchUnitsStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketClientRequestFetchUnitsStatus.displayName = 'proto.Protocol.WebSocketClientRequestFetchUnitsStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerResponseFetchUnitsStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protocol.WebSocketServerResponseFetchUnitsStatus.repeatedFields_, null);
};
goog.inherits(proto.Protocol.WebSocketServerResponseFetchUnitsStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerResponseFetchUnitsStatus.displayName = 'proto.Protocol.WebSocketServerResponseFetchUnitsStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketClientRequestFetchUnitStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketClientRequestFetchUnitStatus.displayName = 'proto.Protocol.WebSocketClientRequestFetchUnitStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketServerResponseFetchUnitStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerResponseFetchUnitStatus.displayName = 'proto.Protocol.WebSocketServerResponseFetchUnitStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketClientRequestReloadUnitsSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketClientRequestReloadUnitsSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketClientRequestReloadUnitsSettings.displayName = 'proto.Protocol.WebSocketClientRequestReloadUnitsSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerResponseReloadUnitsSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketServerResponseReloadUnitsSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerResponseReloadUnitsSettings.displayName = 'proto.Protocol.WebSocketServerResponseReloadUnitsSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketClientRequestReloadUnitSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketClientRequestReloadUnitSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketClientRequestReloadUnitSettings.displayName = 'proto.Protocol.WebSocketClientRequestReloadUnitSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerResponseReloadUnitSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketServerResponseReloadUnitSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerResponseReloadUnitSettings.displayName = 'proto.Protocol.WebSocketServerResponseReloadUnitSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketClientRequestStartUnits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketClientRequestStartUnits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketClientRequestStartUnits.displayName = 'proto.Protocol.WebSocketClientRequestStartUnits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerResponseStartUnits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketServerResponseStartUnits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerResponseStartUnits.displayName = 'proto.Protocol.WebSocketServerResponseStartUnits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketClientRequestStartUnit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketClientRequestStartUnit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketClientRequestStartUnit.displayName = 'proto.Protocol.WebSocketClientRequestStartUnit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerResponseStartUnit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketServerResponseStartUnit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerResponseStartUnit.displayName = 'proto.Protocol.WebSocketServerResponseStartUnit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketClientRequestStopUnits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketClientRequestStopUnits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketClientRequestStopUnits.displayName = 'proto.Protocol.WebSocketClientRequestStopUnits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerResponseStopUnits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketServerResponseStopUnits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerResponseStopUnits.displayName = 'proto.Protocol.WebSocketServerResponseStopUnits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketClientRequestStopUnit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketClientRequestStopUnit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketClientRequestStopUnit.displayName = 'proto.Protocol.WebSocketClientRequestStopUnit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerResponseStopUnit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketServerResponseStopUnit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerResponseStopUnit.displayName = 'proto.Protocol.WebSocketServerResponseStopUnit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.displayName = 'proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.displayName = 'proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped.displayName = 'proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed.displayName = 'proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed.displayName = 'proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter.displayName = 'proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.displayName = 'proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.DaemonMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.DaemonMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.DaemonMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.DaemonMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    workdirectory: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hostcpucores: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hostmemorysize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    processid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.DaemonMeta}
 */
proto.Protocol.DaemonMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.DaemonMeta;
  return proto.Protocol.DaemonMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.DaemonMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.DaemonMeta}
 */
proto.Protocol.DaemonMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkdirectory(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHostcpucores(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHostmemorysize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProcessid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.DaemonMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.DaemonMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.DaemonMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.DaemonMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWorkdirectory();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHostcpucores();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHostmemorysize();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getProcessid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string Version = 1;
 * @return {string}
 */
proto.Protocol.DaemonMeta.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.DaemonMeta} returns this
 */
proto.Protocol.DaemonMeta.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string WorkDirectory = 2;
 * @return {string}
 */
proto.Protocol.DaemonMeta.prototype.getWorkdirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.DaemonMeta} returns this
 */
proto.Protocol.DaemonMeta.prototype.setWorkdirectory = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 HostCpuCores = 3;
 * @return {number}
 */
proto.Protocol.DaemonMeta.prototype.getHostcpucores = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.DaemonMeta} returns this
 */
proto.Protocol.DaemonMeta.prototype.setHostcpucores = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 HostMemorySize = 4;
 * @return {number}
 */
proto.Protocol.DaemonMeta.prototype.getHostmemorysize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.DaemonMeta} returns this
 */
proto.Protocol.DaemonMeta.prototype.setHostmemorysize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 ProcessId = 5;
 * @return {number}
 */
proto.Protocol.DaemonMeta.prototype.getProcessid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.DaemonMeta} returns this
 */
proto.Protocol.DaemonMeta.prototype.setProcessid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.DaemonStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.DaemonStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.DaemonStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.DaemonStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    processtimepercentage: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    processworkingsetsize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    unitsettingscount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    unitprocesscount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    networktotalsent: jspb.Message.getFieldWithDefault(msg, 5, 0),
    networktotalreceived: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.DaemonStatus}
 */
proto.Protocol.DaemonStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.DaemonStatus;
  return proto.Protocol.DaemonStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.DaemonStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.DaemonStatus}
 */
proto.Protocol.DaemonStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProcesstimepercentage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setProcessworkingsetsize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnitsettingscount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnitprocesscount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNetworktotalsent(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNetworktotalreceived(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.DaemonStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.DaemonStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.DaemonStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.DaemonStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcesstimepercentage();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getProcessworkingsetsize();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUnitsettingscount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getUnitprocesscount();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getNetworktotalsent();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getNetworktotalreceived();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional float ProcessTimePercentage = 1;
 * @return {number}
 */
proto.Protocol.DaemonStatus.prototype.getProcesstimepercentage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.DaemonStatus} returns this
 */
proto.Protocol.DaemonStatus.prototype.setProcesstimepercentage = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional uint64 ProcessWorkingSetSize = 2;
 * @return {number}
 */
proto.Protocol.DaemonStatus.prototype.getProcessworkingsetsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.DaemonStatus} returns this
 */
proto.Protocol.DaemonStatus.prototype.setProcessworkingsetsize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 UnitSettingsCount = 3;
 * @return {number}
 */
proto.Protocol.DaemonStatus.prototype.getUnitsettingscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.DaemonStatus} returns this
 */
proto.Protocol.DaemonStatus.prototype.setUnitsettingscount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 UnitProcessCount = 4;
 * @return {number}
 */
proto.Protocol.DaemonStatus.prototype.getUnitprocesscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.DaemonStatus} returns this
 */
proto.Protocol.DaemonStatus.prototype.setUnitprocesscount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 NetworkTotalSent = 5;
 * @return {number}
 */
proto.Protocol.DaemonStatus.prototype.getNetworktotalsent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.DaemonStatus} returns this
 */
proto.Protocol.DaemonStatus.prototype.setNetworktotalsent = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 NetworkTotalReceived = 6;
 * @return {number}
 */
proto.Protocol.DaemonStatus.prototype.getNetworktotalreceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.DaemonStatus} returns this
 */
proto.Protocol.DaemonStatus.prototype.setNetworktotalreceived = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.UnitSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.UnitSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.UnitSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.UnitSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    executeabsolutepath: jspb.Message.getFieldWithDefault(msg, 3, ""),
    workabsolutedirectory: jspb.Message.getFieldWithDefault(msg, 4, ""),
    executeparams: jspb.Message.getFieldWithDefault(msg, 5, ""),
    autostart: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    autostartdelay: jspb.Message.getFieldWithDefault(msg, 7, 0),
    daemonprocess: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    havechildprocesses: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    fetchnetworkusage: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.UnitSettings}
 */
proto.Protocol.UnitSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.UnitSettings;
  return proto.Protocol.UnitSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.UnitSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.UnitSettings}
 */
proto.Protocol.UnitSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecuteabsolutepath(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkabsolutedirectory(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecuteparams(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutostart(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutostartdelay(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDaemonprocess(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHavechildprocesses(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFetchnetworkusage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.UnitSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.UnitSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.UnitSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.UnitSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExecuteabsolutepath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWorkabsolutedirectory();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getExecuteparams();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAutostart();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getAutostartdelay();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getDaemonprocess();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getHavechildprocesses();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getFetchnetworkusage();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.Protocol.UnitSettings.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.UnitSettings} returns this
 */
proto.Protocol.UnitSettings.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Description = 2;
 * @return {string}
 */
proto.Protocol.UnitSettings.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.UnitSettings} returns this
 */
proto.Protocol.UnitSettings.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ExecuteAbsolutePath = 3;
 * @return {string}
 */
proto.Protocol.UnitSettings.prototype.getExecuteabsolutepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.UnitSettings} returns this
 */
proto.Protocol.UnitSettings.prototype.setExecuteabsolutepath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string WorkAbsoluteDirectory = 4;
 * @return {string}
 */
proto.Protocol.UnitSettings.prototype.getWorkabsolutedirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.UnitSettings} returns this
 */
proto.Protocol.UnitSettings.prototype.setWorkabsolutedirectory = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string ExecuteParams = 5;
 * @return {string}
 */
proto.Protocol.UnitSettings.prototype.getExecuteparams = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.UnitSettings} returns this
 */
proto.Protocol.UnitSettings.prototype.setExecuteparams = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool AutoStart = 6;
 * @return {boolean}
 */
proto.Protocol.UnitSettings.prototype.getAutostart = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Protocol.UnitSettings} returns this
 */
proto.Protocol.UnitSettings.prototype.setAutostart = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional uint32 AutoStartDelay = 7;
 * @return {number}
 */
proto.Protocol.UnitSettings.prototype.getAutostartdelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.UnitSettings} returns this
 */
proto.Protocol.UnitSettings.prototype.setAutostartdelay = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool DaemonProcess = 8;
 * @return {boolean}
 */
proto.Protocol.UnitSettings.prototype.getDaemonprocess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Protocol.UnitSettings} returns this
 */
proto.Protocol.UnitSettings.prototype.setDaemonprocess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool HaveChildProcesses = 9;
 * @return {boolean}
 */
proto.Protocol.UnitSettings.prototype.getHavechildprocesses = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Protocol.UnitSettings} returns this
 */
proto.Protocol.UnitSettings.prototype.setHavechildprocesses = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool FetchNetworkUsage = 10;
 * @return {boolean}
 */
proto.Protocol.UnitSettings.prototype.getFetchnetworkusage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Protocol.UnitSettings} returns this
 */
proto.Protocol.UnitSettings.prototype.setFetchnetworkusage = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.UnitProcess.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.UnitProcess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.UnitProcess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.UnitProcess.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    processid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.UnitProcess}
 */
proto.Protocol.UnitProcess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.UnitProcess;
  return proto.Protocol.UnitProcess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.UnitProcess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.UnitProcess}
 */
proto.Protocol.UnitProcess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProcessid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.UnitProcess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.UnitProcess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.UnitProcess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.UnitProcess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getProcessid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.Protocol.UnitProcess.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.UnitProcess} returns this
 */
proto.Protocol.UnitProcess.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 State = 2;
 * @return {number}
 */
proto.Protocol.UnitProcess.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.UnitProcess} returns this
 */
proto.Protocol.UnitProcess.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 ProcessId = 3;
 * @return {number}
 */
proto.Protocol.UnitProcess.prototype.getProcessid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.UnitProcess} returns this
 */
proto.Protocol.UnitProcess.prototype.setProcessid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.UnitNetworkCounter.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.UnitNetworkCounter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.UnitNetworkCounter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.UnitNetworkCounter.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    totalsent: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalreceived: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sendspeed: jspb.Message.getFieldWithDefault(msg, 4, 0),
    receivespeed: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.UnitNetworkCounter}
 */
proto.Protocol.UnitNetworkCounter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.UnitNetworkCounter;
  return proto.Protocol.UnitNetworkCounter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.UnitNetworkCounter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.UnitNetworkCounter}
 */
proto.Protocol.UnitNetworkCounter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalsent(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalreceived(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSendspeed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReceivespeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.UnitNetworkCounter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.UnitNetworkCounter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.UnitNetworkCounter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.UnitNetworkCounter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTotalsent();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTotalreceived();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSendspeed();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getReceivespeed();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.Protocol.UnitNetworkCounter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.UnitNetworkCounter} returns this
 */
proto.Protocol.UnitNetworkCounter.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 TotalSent = 2;
 * @return {number}
 */
proto.Protocol.UnitNetworkCounter.prototype.getTotalsent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.UnitNetworkCounter} returns this
 */
proto.Protocol.UnitNetworkCounter.prototype.setTotalsent = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 TotalReceived = 3;
 * @return {number}
 */
proto.Protocol.UnitNetworkCounter.prototype.getTotalreceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.UnitNetworkCounter} returns this
 */
proto.Protocol.UnitNetworkCounter.prototype.setTotalreceived = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 SendSpeed = 4;
 * @return {number}
 */
proto.Protocol.UnitNetworkCounter.prototype.getSendspeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.UnitNetworkCounter} returns this
 */
proto.Protocol.UnitNetworkCounter.prototype.setSendspeed = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 ReceiveSpeed = 5;
 * @return {number}
 */
proto.Protocol.UnitNetworkCounter.prototype.getReceivespeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.UnitNetworkCounter} returns this
 */
proto.Protocol.UnitNetworkCounter.prototype.setReceivespeed = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.UnitStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.UnitStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.UnitStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.UnitStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    unitname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    unitsettings: (f = msg.getUnitsettings()) && proto.Protocol.UnitSettings.toObject(includeInstance, f),
    unitprocess: (f = msg.getUnitprocess()) && proto.Protocol.UnitProcess.toObject(includeInstance, f),
    unitnetworkcounter: (f = msg.getUnitnetworkcounter()) && proto.Protocol.UnitNetworkCounter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.UnitStatus}
 */
proto.Protocol.UnitStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.UnitStatus;
  return proto.Protocol.UnitStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.UnitStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.UnitStatus}
 */
proto.Protocol.UnitStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitname(value);
      break;
    case 2:
      var value = new proto.Protocol.UnitSettings;
      reader.readMessage(value,proto.Protocol.UnitSettings.deserializeBinaryFromReader);
      msg.setUnitsettings(value);
      break;
    case 3:
      var value = new proto.Protocol.UnitProcess;
      reader.readMessage(value,proto.Protocol.UnitProcess.deserializeBinaryFromReader);
      msg.setUnitprocess(value);
      break;
    case 4:
      var value = new proto.Protocol.UnitNetworkCounter;
      reader.readMessage(value,proto.Protocol.UnitNetworkCounter.deserializeBinaryFromReader);
      msg.setUnitnetworkcounter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.UnitStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.UnitStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.UnitStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.UnitStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnitname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUnitsettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Protocol.UnitSettings.serializeBinaryToWriter
    );
  }
  f = message.getUnitprocess();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Protocol.UnitProcess.serializeBinaryToWriter
    );
  }
  f = message.getUnitnetworkcounter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Protocol.UnitNetworkCounter.serializeBinaryToWriter
    );
  }
};


/**
 * optional string UnitName = 1;
 * @return {string}
 */
proto.Protocol.UnitStatus.prototype.getUnitname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.UnitStatus} returns this
 */
proto.Protocol.UnitStatus.prototype.setUnitname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UnitSettings UnitSettings = 2;
 * @return {?proto.Protocol.UnitSettings}
 */
proto.Protocol.UnitStatus.prototype.getUnitsettings = function() {
  return /** @type{?proto.Protocol.UnitSettings} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.UnitSettings, 2));
};


/**
 * @param {?proto.Protocol.UnitSettings|undefined} value
 * @return {!proto.Protocol.UnitStatus} returns this
*/
proto.Protocol.UnitStatus.prototype.setUnitsettings = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.UnitStatus} returns this
 */
proto.Protocol.UnitStatus.prototype.clearUnitsettings = function() {
  return this.setUnitsettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.UnitStatus.prototype.hasUnitsettings = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UnitProcess UnitProcess = 3;
 * @return {?proto.Protocol.UnitProcess}
 */
proto.Protocol.UnitStatus.prototype.getUnitprocess = function() {
  return /** @type{?proto.Protocol.UnitProcess} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.UnitProcess, 3));
};


/**
 * @param {?proto.Protocol.UnitProcess|undefined} value
 * @return {!proto.Protocol.UnitStatus} returns this
*/
proto.Protocol.UnitStatus.prototype.setUnitprocess = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.UnitStatus} returns this
 */
proto.Protocol.UnitStatus.prototype.clearUnitprocess = function() {
  return this.setUnitprocess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.UnitStatus.prototype.hasUnitprocess = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UnitNetworkCounter UnitNetworkCounter = 4;
 * @return {?proto.Protocol.UnitNetworkCounter}
 */
proto.Protocol.UnitStatus.prototype.getUnitnetworkcounter = function() {
  return /** @type{?proto.Protocol.UnitNetworkCounter} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.UnitNetworkCounter, 4));
};


/**
 * @param {?proto.Protocol.UnitNetworkCounter|undefined} value
 * @return {!proto.Protocol.UnitStatus} returns this
*/
proto.Protocol.UnitStatus.prototype.setUnitnetworkcounter = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.UnitStatus} returns this
 */
proto.Protocol.UnitStatus.prototype.clearUnitnetworkcounter = function() {
  return this.setUnitnetworkcounter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.UnitStatus.prototype.hasUnitnetworkcounter = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketPacketTest.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketPacketTest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketPacketTest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketPacketTest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketPacketTest}
 */
proto.Protocol.WebSocketPacketTest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketPacketTest;
  return proto.Protocol.WebSocketPacketTest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketPacketTest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketPacketTest}
 */
proto.Protocol.WebSocketPacketTest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketPacketTest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketPacketTest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketPacketTest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketPacketTest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketPacketTest.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketPacketTest} returns this
 */
proto.Protocol.WebSocketPacketTest.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerResponseAfterOnOpen.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerResponseAfterOnOpen.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerResponseAfterOnOpen} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseAfterOnOpen.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hellomessage: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerResponseAfterOnOpen}
 */
proto.Protocol.WebSocketServerResponseAfterOnOpen.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerResponseAfterOnOpen;
  return proto.Protocol.WebSocketServerResponseAfterOnOpen.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerResponseAfterOnOpen} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerResponseAfterOnOpen}
 */
proto.Protocol.WebSocketServerResponseAfterOnOpen.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHellomessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerResponseAfterOnOpen.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerResponseAfterOnOpen.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerResponseAfterOnOpen} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseAfterOnOpen.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHellomessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerResponseAfterOnOpen.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerResponseAfterOnOpen} returns this
 */
proto.Protocol.WebSocketServerResponseAfterOnOpen.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseAfterOnOpen.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseAfterOnOpen} returns this
 */
proto.Protocol.WebSocketServerResponseAfterOnOpen.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string HelloMessage = 3;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseAfterOnOpen.prototype.getHellomessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseAfterOnOpen} returns this
 */
proto.Protocol.WebSocketServerResponseAfterOnOpen.prototype.setHellomessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketClientRequestValidateControlKey.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketClientRequestValidateControlKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketClientRequestValidateControlKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestValidateControlKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    controlkey: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketClientRequestValidateControlKey}
 */
proto.Protocol.WebSocketClientRequestValidateControlKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketClientRequestValidateControlKey;
  return proto.Protocol.WebSocketClientRequestValidateControlKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketClientRequestValidateControlKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketClientRequestValidateControlKey}
 */
proto.Protocol.WebSocketClientRequestValidateControlKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setControlkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketClientRequestValidateControlKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketClientRequestValidateControlKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketClientRequestValidateControlKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestValidateControlKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getControlkey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketClientRequestValidateControlKey.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketClientRequestValidateControlKey} returns this
 */
proto.Protocol.WebSocketClientRequestValidateControlKey.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestValidateControlKey.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestValidateControlKey} returns this
 */
proto.Protocol.WebSocketClientRequestValidateControlKey.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ControlKey = 3;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestValidateControlKey.prototype.getControlkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestValidateControlKey} returns this
 */
proto.Protocol.WebSocketClientRequestValidateControlKey.prototype.setControlkey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerResponseValidateControlKey.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerResponseValidateControlKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerResponseValidateControlKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseValidateControlKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    validation: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    validationmessage: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerResponseValidateControlKey}
 */
proto.Protocol.WebSocketServerResponseValidateControlKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerResponseValidateControlKey;
  return proto.Protocol.WebSocketServerResponseValidateControlKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerResponseValidateControlKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerResponseValidateControlKey}
 */
proto.Protocol.WebSocketServerResponseValidateControlKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValidation(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidationmessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerResponseValidateControlKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerResponseValidateControlKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerResponseValidateControlKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseValidateControlKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValidation();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getValidationmessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerResponseValidateControlKey.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerResponseValidateControlKey} returns this
 */
proto.Protocol.WebSocketServerResponseValidateControlKey.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseValidateControlKey.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseValidateControlKey} returns this
 */
proto.Protocol.WebSocketServerResponseValidateControlKey.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool Validation = 3;
 * @return {boolean}
 */
proto.Protocol.WebSocketServerResponseValidateControlKey.prototype.getValidation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Protocol.WebSocketServerResponseValidateControlKey} returns this
 */
proto.Protocol.WebSocketServerResponseValidateControlKey.prototype.setValidation = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string ValidationMessage = 4;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseValidateControlKey.prototype.getValidationmessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseValidateControlKey} returns this
 */
proto.Protocol.WebSocketServerResponseValidateControlKey.prototype.setValidationmessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketClientRequestFetchDaemonMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketClientRequestFetchDaemonMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketClientRequestFetchDaemonMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestFetchDaemonMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketClientRequestFetchDaemonMeta}
 */
proto.Protocol.WebSocketClientRequestFetchDaemonMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketClientRequestFetchDaemonMeta;
  return proto.Protocol.WebSocketClientRequestFetchDaemonMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketClientRequestFetchDaemonMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketClientRequestFetchDaemonMeta}
 */
proto.Protocol.WebSocketClientRequestFetchDaemonMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketClientRequestFetchDaemonMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketClientRequestFetchDaemonMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketClientRequestFetchDaemonMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestFetchDaemonMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketClientRequestFetchDaemonMeta.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketClientRequestFetchDaemonMeta} returns this
 */
proto.Protocol.WebSocketClientRequestFetchDaemonMeta.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestFetchDaemonMeta.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestFetchDaemonMeta} returns this
 */
proto.Protocol.WebSocketClientRequestFetchDaemonMeta.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerResponseFetchDaemonMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerResponseFetchDaemonMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerResponseFetchDaemonMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseFetchDaemonMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    daemonmeta: (f = msg.getDaemonmeta()) && proto.Protocol.DaemonMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerResponseFetchDaemonMeta}
 */
proto.Protocol.WebSocketServerResponseFetchDaemonMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerResponseFetchDaemonMeta;
  return proto.Protocol.WebSocketServerResponseFetchDaemonMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerResponseFetchDaemonMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerResponseFetchDaemonMeta}
 */
proto.Protocol.WebSocketServerResponseFetchDaemonMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = new proto.Protocol.DaemonMeta;
      reader.readMessage(value,proto.Protocol.DaemonMeta.deserializeBinaryFromReader);
      msg.setDaemonmeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerResponseFetchDaemonMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerResponseFetchDaemonMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerResponseFetchDaemonMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseFetchDaemonMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDaemonmeta();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Protocol.DaemonMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerResponseFetchDaemonMeta.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerResponseFetchDaemonMeta} returns this
 */
proto.Protocol.WebSocketServerResponseFetchDaemonMeta.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseFetchDaemonMeta.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseFetchDaemonMeta} returns this
 */
proto.Protocol.WebSocketServerResponseFetchDaemonMeta.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DaemonMeta DaemonMeta = 3;
 * @return {?proto.Protocol.DaemonMeta}
 */
proto.Protocol.WebSocketServerResponseFetchDaemonMeta.prototype.getDaemonmeta = function() {
  return /** @type{?proto.Protocol.DaemonMeta} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.DaemonMeta, 3));
};


/**
 * @param {?proto.Protocol.DaemonMeta|undefined} value
 * @return {!proto.Protocol.WebSocketServerResponseFetchDaemonMeta} returns this
*/
proto.Protocol.WebSocketServerResponseFetchDaemonMeta.prototype.setDaemonmeta = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.WebSocketServerResponseFetchDaemonMeta} returns this
 */
proto.Protocol.WebSocketServerResponseFetchDaemonMeta.prototype.clearDaemonmeta = function() {
  return this.setDaemonmeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.WebSocketServerResponseFetchDaemonMeta.prototype.hasDaemonmeta = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketClientRequestFetchDaemonStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketClientRequestFetchDaemonStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketClientRequestFetchDaemonStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestFetchDaemonStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketClientRequestFetchDaemonStatus}
 */
proto.Protocol.WebSocketClientRequestFetchDaemonStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketClientRequestFetchDaemonStatus;
  return proto.Protocol.WebSocketClientRequestFetchDaemonStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketClientRequestFetchDaemonStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketClientRequestFetchDaemonStatus}
 */
proto.Protocol.WebSocketClientRequestFetchDaemonStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketClientRequestFetchDaemonStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketClientRequestFetchDaemonStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketClientRequestFetchDaemonStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestFetchDaemonStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketClientRequestFetchDaemonStatus.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketClientRequestFetchDaemonStatus} returns this
 */
proto.Protocol.WebSocketClientRequestFetchDaemonStatus.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestFetchDaemonStatus.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestFetchDaemonStatus} returns this
 */
proto.Protocol.WebSocketClientRequestFetchDaemonStatus.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerResponseFetchDaemonStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerResponseFetchDaemonStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerResponseFetchDaemonStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseFetchDaemonStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    daemonstatus: (f = msg.getDaemonstatus()) && proto.Protocol.DaemonStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerResponseFetchDaemonStatus}
 */
proto.Protocol.WebSocketServerResponseFetchDaemonStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerResponseFetchDaemonStatus;
  return proto.Protocol.WebSocketServerResponseFetchDaemonStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerResponseFetchDaemonStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerResponseFetchDaemonStatus}
 */
proto.Protocol.WebSocketServerResponseFetchDaemonStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = new proto.Protocol.DaemonStatus;
      reader.readMessage(value,proto.Protocol.DaemonStatus.deserializeBinaryFromReader);
      msg.setDaemonstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerResponseFetchDaemonStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerResponseFetchDaemonStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerResponseFetchDaemonStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseFetchDaemonStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDaemonstatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Protocol.DaemonStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerResponseFetchDaemonStatus.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerResponseFetchDaemonStatus} returns this
 */
proto.Protocol.WebSocketServerResponseFetchDaemonStatus.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseFetchDaemonStatus.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseFetchDaemonStatus} returns this
 */
proto.Protocol.WebSocketServerResponseFetchDaemonStatus.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DaemonStatus DaemonStatus = 3;
 * @return {?proto.Protocol.DaemonStatus}
 */
proto.Protocol.WebSocketServerResponseFetchDaemonStatus.prototype.getDaemonstatus = function() {
  return /** @type{?proto.Protocol.DaemonStatus} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.DaemonStatus, 3));
};


/**
 * @param {?proto.Protocol.DaemonStatus|undefined} value
 * @return {!proto.Protocol.WebSocketServerResponseFetchDaemonStatus} returns this
*/
proto.Protocol.WebSocketServerResponseFetchDaemonStatus.prototype.setDaemonstatus = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.WebSocketServerResponseFetchDaemonStatus} returns this
 */
proto.Protocol.WebSocketServerResponseFetchDaemonStatus.prototype.clearDaemonstatus = function() {
  return this.setDaemonstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.WebSocketServerResponseFetchDaemonStatus.prototype.hasDaemonstatus = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketClientRequestFetchUnitsStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketClientRequestFetchUnitsStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketClientRequestFetchUnitsStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestFetchUnitsStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketClientRequestFetchUnitsStatus}
 */
proto.Protocol.WebSocketClientRequestFetchUnitsStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketClientRequestFetchUnitsStatus;
  return proto.Protocol.WebSocketClientRequestFetchUnitsStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketClientRequestFetchUnitsStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketClientRequestFetchUnitsStatus}
 */
proto.Protocol.WebSocketClientRequestFetchUnitsStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketClientRequestFetchUnitsStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketClientRequestFetchUnitsStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketClientRequestFetchUnitsStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestFetchUnitsStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketClientRequestFetchUnitsStatus.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketClientRequestFetchUnitsStatus} returns this
 */
proto.Protocol.WebSocketClientRequestFetchUnitsStatus.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestFetchUnitsStatus.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestFetchUnitsStatus} returns this
 */
proto.Protocol.WebSocketClientRequestFetchUnitsStatus.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protocol.WebSocketServerResponseFetchUnitsStatus.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerResponseFetchUnitsStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerResponseFetchUnitsStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerResponseFetchUnitsStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseFetchUnitsStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unitstatusList: jspb.Message.toObjectList(msg.getUnitstatusList(),
    proto.Protocol.UnitStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitsStatus}
 */
proto.Protocol.WebSocketServerResponseFetchUnitsStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerResponseFetchUnitsStatus;
  return proto.Protocol.WebSocketServerResponseFetchUnitsStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerResponseFetchUnitsStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitsStatus}
 */
proto.Protocol.WebSocketServerResponseFetchUnitsStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = new proto.Protocol.UnitStatus;
      reader.readMessage(value,proto.Protocol.UnitStatus.deserializeBinaryFromReader);
      msg.addUnitstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerResponseFetchUnitsStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerResponseFetchUnitsStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerResponseFetchUnitsStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseFetchUnitsStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnitstatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Protocol.UnitStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerResponseFetchUnitsStatus.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitsStatus} returns this
 */
proto.Protocol.WebSocketServerResponseFetchUnitsStatus.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseFetchUnitsStatus.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitsStatus} returns this
 */
proto.Protocol.WebSocketServerResponseFetchUnitsStatus.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated UnitStatus UnitStatus = 3;
 * @return {!Array<!proto.Protocol.UnitStatus>}
 */
proto.Protocol.WebSocketServerResponseFetchUnitsStatus.prototype.getUnitstatusList = function() {
  return /** @type{!Array<!proto.Protocol.UnitStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Protocol.UnitStatus, 3));
};


/**
 * @param {!Array<!proto.Protocol.UnitStatus>} value
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitsStatus} returns this
*/
proto.Protocol.WebSocketServerResponseFetchUnitsStatus.prototype.setUnitstatusList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Protocol.UnitStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protocol.UnitStatus}
 */
proto.Protocol.WebSocketServerResponseFetchUnitsStatus.prototype.addUnitstatus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Protocol.UnitStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitsStatus} returns this
 */
proto.Protocol.WebSocketServerResponseFetchUnitsStatus.prototype.clearUnitstatusList = function() {
  return this.setUnitstatusList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketClientRequestFetchUnitStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketClientRequestFetchUnitStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unitname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketClientRequestFetchUnitStatus}
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketClientRequestFetchUnitStatus;
  return proto.Protocol.WebSocketClientRequestFetchUnitStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketClientRequestFetchUnitStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketClientRequestFetchUnitStatus}
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketClientRequestFetchUnitStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketClientRequestFetchUnitStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnitname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatus.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketClientRequestFetchUnitStatus} returns this
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatus.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatus.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestFetchUnitStatus} returns this
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatus.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string UnitName = 3;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatus.prototype.getUnitname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestFetchUnitStatus} returns this
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatus.prototype.setUnitname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerResponseFetchUnitStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerResponseFetchUnitStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unitname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    unitstatus: (f = msg.getUnitstatus()) && proto.Protocol.UnitStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitStatus}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerResponseFetchUnitStatus;
  return proto.Protocol.WebSocketServerResponseFetchUnitStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerResponseFetchUnitStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitStatus}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitname(value);
      break;
    case 4:
      var value = new proto.Protocol.UnitStatus;
      reader.readMessage(value,proto.Protocol.UnitStatus.deserializeBinaryFromReader);
      msg.setUnitstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerResponseFetchUnitStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerResponseFetchUnitStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnitname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUnitstatus();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Protocol.UnitStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatus.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitStatus} returns this
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatus.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatus.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitStatus} returns this
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatus.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string UnitName = 3;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatus.prototype.getUnitname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitStatus} returns this
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatus.prototype.setUnitname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional UnitStatus UnitStatus = 4;
 * @return {?proto.Protocol.UnitStatus}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatus.prototype.getUnitstatus = function() {
  return /** @type{?proto.Protocol.UnitStatus} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.UnitStatus, 4));
};


/**
 * @param {?proto.Protocol.UnitStatus|undefined} value
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitStatus} returns this
*/
proto.Protocol.WebSocketServerResponseFetchUnitStatus.prototype.setUnitstatus = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitStatus} returns this
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatus.prototype.clearUnitstatus = function() {
  return this.setUnitstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatus.prototype.hasUnitstatus = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketClientRequestReloadUnitsSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketClientRequestReloadUnitsSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketClientRequestReloadUnitsSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestReloadUnitsSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    restartifupdate: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketClientRequestReloadUnitsSettings}
 */
proto.Protocol.WebSocketClientRequestReloadUnitsSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketClientRequestReloadUnitsSettings;
  return proto.Protocol.WebSocketClientRequestReloadUnitsSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketClientRequestReloadUnitsSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketClientRequestReloadUnitsSettings}
 */
proto.Protocol.WebSocketClientRequestReloadUnitsSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRestartifupdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketClientRequestReloadUnitsSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketClientRequestReloadUnitsSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketClientRequestReloadUnitsSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestReloadUnitsSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRestartifupdate();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketClientRequestReloadUnitsSettings.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketClientRequestReloadUnitsSettings} returns this
 */
proto.Protocol.WebSocketClientRequestReloadUnitsSettings.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestReloadUnitsSettings.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestReloadUnitsSettings} returns this
 */
proto.Protocol.WebSocketClientRequestReloadUnitsSettings.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool RestartIfUpdate = 3;
 * @return {boolean}
 */
proto.Protocol.WebSocketClientRequestReloadUnitsSettings.prototype.getRestartifupdate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Protocol.WebSocketClientRequestReloadUnitsSettings} returns this
 */
proto.Protocol.WebSocketClientRequestReloadUnitsSettings.prototype.setRestartifupdate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerResponseReloadUnitsSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerResponseReloadUnitsSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerResponseReloadUnitsSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseReloadUnitsSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    restartifupdate: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    executed: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerResponseReloadUnitsSettings}
 */
proto.Protocol.WebSocketServerResponseReloadUnitsSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerResponseReloadUnitsSettings;
  return proto.Protocol.WebSocketServerResponseReloadUnitsSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerResponseReloadUnitsSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerResponseReloadUnitsSettings}
 */
proto.Protocol.WebSocketServerResponseReloadUnitsSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRestartifupdate(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExecuted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerResponseReloadUnitsSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerResponseReloadUnitsSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerResponseReloadUnitsSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseReloadUnitsSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRestartifupdate();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getExecuted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerResponseReloadUnitsSettings.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerResponseReloadUnitsSettings} returns this
 */
proto.Protocol.WebSocketServerResponseReloadUnitsSettings.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseReloadUnitsSettings.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseReloadUnitsSettings} returns this
 */
proto.Protocol.WebSocketServerResponseReloadUnitsSettings.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool RestartIfUpdate = 3;
 * @return {boolean}
 */
proto.Protocol.WebSocketServerResponseReloadUnitsSettings.prototype.getRestartifupdate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Protocol.WebSocketServerResponseReloadUnitsSettings} returns this
 */
proto.Protocol.WebSocketServerResponseReloadUnitsSettings.prototype.setRestartifupdate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool Executed = 4;
 * @return {boolean}
 */
proto.Protocol.WebSocketServerResponseReloadUnitsSettings.prototype.getExecuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Protocol.WebSocketServerResponseReloadUnitsSettings} returns this
 */
proto.Protocol.WebSocketServerResponseReloadUnitsSettings.prototype.setExecuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketClientRequestReloadUnitSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketClientRequestReloadUnitSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketClientRequestReloadUnitSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestReloadUnitSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    restartifupdate: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    unitname: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketClientRequestReloadUnitSettings}
 */
proto.Protocol.WebSocketClientRequestReloadUnitSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketClientRequestReloadUnitSettings;
  return proto.Protocol.WebSocketClientRequestReloadUnitSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketClientRequestReloadUnitSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketClientRequestReloadUnitSettings}
 */
proto.Protocol.WebSocketClientRequestReloadUnitSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRestartifupdate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketClientRequestReloadUnitSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketClientRequestReloadUnitSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketClientRequestReloadUnitSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestReloadUnitSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRestartifupdate();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getUnitname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketClientRequestReloadUnitSettings.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketClientRequestReloadUnitSettings} returns this
 */
proto.Protocol.WebSocketClientRequestReloadUnitSettings.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestReloadUnitSettings.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestReloadUnitSettings} returns this
 */
proto.Protocol.WebSocketClientRequestReloadUnitSettings.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool RestartIfUpdate = 3;
 * @return {boolean}
 */
proto.Protocol.WebSocketClientRequestReloadUnitSettings.prototype.getRestartifupdate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Protocol.WebSocketClientRequestReloadUnitSettings} returns this
 */
proto.Protocol.WebSocketClientRequestReloadUnitSettings.prototype.setRestartifupdate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string UnitName = 4;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestReloadUnitSettings.prototype.getUnitname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestReloadUnitSettings} returns this
 */
proto.Protocol.WebSocketClientRequestReloadUnitSettings.prototype.setUnitname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerResponseReloadUnitSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerResponseReloadUnitSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerResponseReloadUnitSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseReloadUnitSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    restartifupdate: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    unitname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    executed: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerResponseReloadUnitSettings}
 */
proto.Protocol.WebSocketServerResponseReloadUnitSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerResponseReloadUnitSettings;
  return proto.Protocol.WebSocketServerResponseReloadUnitSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerResponseReloadUnitSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerResponseReloadUnitSettings}
 */
proto.Protocol.WebSocketServerResponseReloadUnitSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRestartifupdate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitname(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExecuted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerResponseReloadUnitSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerResponseReloadUnitSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerResponseReloadUnitSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseReloadUnitSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRestartifupdate();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getUnitname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getExecuted();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerResponseReloadUnitSettings.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerResponseReloadUnitSettings} returns this
 */
proto.Protocol.WebSocketServerResponseReloadUnitSettings.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseReloadUnitSettings.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseReloadUnitSettings} returns this
 */
proto.Protocol.WebSocketServerResponseReloadUnitSettings.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool RestartIfUpdate = 3;
 * @return {boolean}
 */
proto.Protocol.WebSocketServerResponseReloadUnitSettings.prototype.getRestartifupdate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Protocol.WebSocketServerResponseReloadUnitSettings} returns this
 */
proto.Protocol.WebSocketServerResponseReloadUnitSettings.prototype.setRestartifupdate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string UnitName = 4;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseReloadUnitSettings.prototype.getUnitname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseReloadUnitSettings} returns this
 */
proto.Protocol.WebSocketServerResponseReloadUnitSettings.prototype.setUnitname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool Executed = 5;
 * @return {boolean}
 */
proto.Protocol.WebSocketServerResponseReloadUnitSettings.prototype.getExecuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Protocol.WebSocketServerResponseReloadUnitSettings} returns this
 */
proto.Protocol.WebSocketServerResponseReloadUnitSettings.prototype.setExecuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketClientRequestStartUnits.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketClientRequestStartUnits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketClientRequestStartUnits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestStartUnits.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketClientRequestStartUnits}
 */
proto.Protocol.WebSocketClientRequestStartUnits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketClientRequestStartUnits;
  return proto.Protocol.WebSocketClientRequestStartUnits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketClientRequestStartUnits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketClientRequestStartUnits}
 */
proto.Protocol.WebSocketClientRequestStartUnits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketClientRequestStartUnits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketClientRequestStartUnits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketClientRequestStartUnits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestStartUnits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketClientRequestStartUnits.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketClientRequestStartUnits} returns this
 */
proto.Protocol.WebSocketClientRequestStartUnits.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestStartUnits.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestStartUnits} returns this
 */
proto.Protocol.WebSocketClientRequestStartUnits.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerResponseStartUnits.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerResponseStartUnits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerResponseStartUnits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseStartUnits.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    executed: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerResponseStartUnits}
 */
proto.Protocol.WebSocketServerResponseStartUnits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerResponseStartUnits;
  return proto.Protocol.WebSocketServerResponseStartUnits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerResponseStartUnits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerResponseStartUnits}
 */
proto.Protocol.WebSocketServerResponseStartUnits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExecuted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerResponseStartUnits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerResponseStartUnits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerResponseStartUnits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseStartUnits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExecuted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerResponseStartUnits.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerResponseStartUnits} returns this
 */
proto.Protocol.WebSocketServerResponseStartUnits.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseStartUnits.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseStartUnits} returns this
 */
proto.Protocol.WebSocketServerResponseStartUnits.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool Executed = 3;
 * @return {boolean}
 */
proto.Protocol.WebSocketServerResponseStartUnits.prototype.getExecuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Protocol.WebSocketServerResponseStartUnits} returns this
 */
proto.Protocol.WebSocketServerResponseStartUnits.prototype.setExecuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketClientRequestStartUnit.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketClientRequestStartUnit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketClientRequestStartUnit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestStartUnit.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unitname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketClientRequestStartUnit}
 */
proto.Protocol.WebSocketClientRequestStartUnit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketClientRequestStartUnit;
  return proto.Protocol.WebSocketClientRequestStartUnit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketClientRequestStartUnit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketClientRequestStartUnit}
 */
proto.Protocol.WebSocketClientRequestStartUnit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketClientRequestStartUnit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketClientRequestStartUnit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketClientRequestStartUnit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestStartUnit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnitname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketClientRequestStartUnit.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketClientRequestStartUnit} returns this
 */
proto.Protocol.WebSocketClientRequestStartUnit.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestStartUnit.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestStartUnit} returns this
 */
proto.Protocol.WebSocketClientRequestStartUnit.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string UnitName = 3;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestStartUnit.prototype.getUnitname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestStartUnit} returns this
 */
proto.Protocol.WebSocketClientRequestStartUnit.prototype.setUnitname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerResponseStartUnit.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerResponseStartUnit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerResponseStartUnit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseStartUnit.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unitname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    executed: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerResponseStartUnit}
 */
proto.Protocol.WebSocketServerResponseStartUnit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerResponseStartUnit;
  return proto.Protocol.WebSocketServerResponseStartUnit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerResponseStartUnit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerResponseStartUnit}
 */
proto.Protocol.WebSocketServerResponseStartUnit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitname(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExecuted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerResponseStartUnit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerResponseStartUnit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerResponseStartUnit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseStartUnit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnitname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExecuted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerResponseStartUnit.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerResponseStartUnit} returns this
 */
proto.Protocol.WebSocketServerResponseStartUnit.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseStartUnit.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseStartUnit} returns this
 */
proto.Protocol.WebSocketServerResponseStartUnit.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string UnitName = 3;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseStartUnit.prototype.getUnitname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseStartUnit} returns this
 */
proto.Protocol.WebSocketServerResponseStartUnit.prototype.setUnitname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool Executed = 4;
 * @return {boolean}
 */
proto.Protocol.WebSocketServerResponseStartUnit.prototype.getExecuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Protocol.WebSocketServerResponseStartUnit} returns this
 */
proto.Protocol.WebSocketServerResponseStartUnit.prototype.setExecuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketClientRequestStopUnits.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketClientRequestStopUnits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketClientRequestStopUnits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestStopUnits.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketClientRequestStopUnits}
 */
proto.Protocol.WebSocketClientRequestStopUnits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketClientRequestStopUnits;
  return proto.Protocol.WebSocketClientRequestStopUnits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketClientRequestStopUnits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketClientRequestStopUnits}
 */
proto.Protocol.WebSocketClientRequestStopUnits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketClientRequestStopUnits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketClientRequestStopUnits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketClientRequestStopUnits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestStopUnits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketClientRequestStopUnits.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketClientRequestStopUnits} returns this
 */
proto.Protocol.WebSocketClientRequestStopUnits.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestStopUnits.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestStopUnits} returns this
 */
proto.Protocol.WebSocketClientRequestStopUnits.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerResponseStopUnits.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerResponseStopUnits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerResponseStopUnits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseStopUnits.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    executed: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerResponseStopUnits}
 */
proto.Protocol.WebSocketServerResponseStopUnits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerResponseStopUnits;
  return proto.Protocol.WebSocketServerResponseStopUnits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerResponseStopUnits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerResponseStopUnits}
 */
proto.Protocol.WebSocketServerResponseStopUnits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExecuted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerResponseStopUnits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerResponseStopUnits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerResponseStopUnits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseStopUnits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExecuted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerResponseStopUnits.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerResponseStopUnits} returns this
 */
proto.Protocol.WebSocketServerResponseStopUnits.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseStopUnits.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseStopUnits} returns this
 */
proto.Protocol.WebSocketServerResponseStopUnits.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool Executed = 3;
 * @return {boolean}
 */
proto.Protocol.WebSocketServerResponseStopUnits.prototype.getExecuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Protocol.WebSocketServerResponseStopUnits} returns this
 */
proto.Protocol.WebSocketServerResponseStopUnits.prototype.setExecuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketClientRequestStopUnit.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketClientRequestStopUnit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketClientRequestStopUnit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestStopUnit.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unitname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketClientRequestStopUnit}
 */
proto.Protocol.WebSocketClientRequestStopUnit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketClientRequestStopUnit;
  return proto.Protocol.WebSocketClientRequestStopUnit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketClientRequestStopUnit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketClientRequestStopUnit}
 */
proto.Protocol.WebSocketClientRequestStopUnit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketClientRequestStopUnit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketClientRequestStopUnit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketClientRequestStopUnit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestStopUnit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnitname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketClientRequestStopUnit.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketClientRequestStopUnit} returns this
 */
proto.Protocol.WebSocketClientRequestStopUnit.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestStopUnit.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestStopUnit} returns this
 */
proto.Protocol.WebSocketClientRequestStopUnit.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string UnitName = 3;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestStopUnit.prototype.getUnitname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestStopUnit} returns this
 */
proto.Protocol.WebSocketClientRequestStopUnit.prototype.setUnitname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerResponseStopUnit.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerResponseStopUnit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerResponseStopUnit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseStopUnit.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unitname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    executed: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerResponseStopUnit}
 */
proto.Protocol.WebSocketServerResponseStopUnit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerResponseStopUnit;
  return proto.Protocol.WebSocketServerResponseStopUnit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerResponseStopUnit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerResponseStopUnit}
 */
proto.Protocol.WebSocketServerResponseStopUnit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitname(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExecuted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerResponseStopUnit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerResponseStopUnit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerResponseStopUnit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseStopUnit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnitname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExecuted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerResponseStopUnit.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerResponseStopUnit} returns this
 */
proto.Protocol.WebSocketServerResponseStopUnit.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseStopUnit.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseStopUnit} returns this
 */
proto.Protocol.WebSocketServerResponseStopUnit.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string UnitName = 3;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseStopUnit.prototype.getUnitname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseStopUnit} returns this
 */
proto.Protocol.WebSocketServerResponseStopUnit.prototype.setUnitname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool Executed = 4;
 * @return {boolean}
 */
proto.Protocol.WebSocketServerResponseStopUnit.prototype.getExecuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Protocol.WebSocketServerResponseStopUnit} returns this
 */
proto.Protocol.WebSocketServerResponseStopUnit.prototype.setExecuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unitname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    unitsettings: (f = msg.getUnitsettings()) && proto.Protocol.UnitSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload;
  return proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitname(value);
      break;
    case 4:
      var value = new proto.Protocol.UnitSettings;
      reader.readMessage(value,proto.Protocol.UnitSettings.deserializeBinaryFromReader);
      msg.setUnitsettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnitname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUnitsettings();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Protocol.UnitSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload} returns this
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload} returns this
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string UnitName = 3;
 * @return {string}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.prototype.getUnitname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload} returns this
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.prototype.setUnitname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional UnitSettings UnitSettings = 4;
 * @return {?proto.Protocol.UnitSettings}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.prototype.getUnitsettings = function() {
  return /** @type{?proto.Protocol.UnitSettings} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.UnitSettings, 4));
};


/**
 * @param {?proto.Protocol.UnitSettings|undefined} value
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload} returns this
*/
proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.prototype.setUnitsettings = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload} returns this
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.prototype.clearUnitsettings = function() {
  return this.setUnitsettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitSettingsReload.prototype.hasUnitsettings = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unitname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    unitprocess: (f = msg.getUnitprocess()) && proto.Protocol.UnitProcess.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted;
  return proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitname(value);
      break;
    case 4:
      var value = new proto.Protocol.UnitProcess;
      reader.readMessage(value,proto.Protocol.UnitProcess.deserializeBinaryFromReader);
      msg.setUnitprocess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnitname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUnitprocess();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Protocol.UnitProcess.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted} returns this
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted} returns this
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string UnitName = 3;
 * @return {string}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.prototype.getUnitname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted} returns this
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.prototype.setUnitname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional UnitProcess UnitProcess = 4;
 * @return {?proto.Protocol.UnitProcess}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.prototype.getUnitprocess = function() {
  return /** @type{?proto.Protocol.UnitProcess} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.UnitProcess, 4));
};


/**
 * @param {?proto.Protocol.UnitProcess|undefined} value
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted} returns this
*/
proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.prototype.setUnitprocess = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted} returns this
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.prototype.clearUnitprocess = function() {
  return this.setUnitprocess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStarted.prototype.hasUnitprocess = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unitname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped;
  return proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnitname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped} returns this
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped} returns this
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string UnitName = 3;
 * @return {string}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped.prototype.getUnitname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped} returns this
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopped.prototype.setUnitname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unitname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed;
  return proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnitname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed} returns this
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed} returns this
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string UnitName = 3;
 * @return {string}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed.prototype.getUnitname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed} returns this
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStartFailed.prototype.setUnitname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unitname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed;
  return proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnitname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed} returns this
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed} returns this
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string UnitName = 3;
 * @return {string}
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed.prototype.getUnitname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed} returns this
 */
proto.Protocol.WebSocketServerNotifyClientsThatUnitStopFailed.prototype.setUnitname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unitname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter}
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter;
  return proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter}
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnitname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter} returns this
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter} returns this
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string UnitName = 3;
 * @return {string}
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter.prototype.getUnitname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter} returns this
 */
proto.Protocol.WebSocketClientRequestFetchUnitStatusNetworkCounter.prototype.setUnitname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientconnectionguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unitname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    unitnetworkcounter: (f = msg.getUnitnetworkcounter()) && proto.Protocol.UnitNetworkCounter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter;
  return proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientconnectionguid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitname(value);
      break;
    case 4:
      var value = new proto.Protocol.UnitNetworkCounter;
      reader.readMessage(value,proto.Protocol.UnitNetworkCounter.deserializeBinaryFromReader);
      msg.setUnitnetworkcounter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientconnectionguid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnitname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUnitnetworkcounter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Protocol.UnitNetworkCounter.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter} returns this
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ClientConnectionGuid = 2;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.prototype.getClientconnectionguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter} returns this
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.prototype.setClientconnectionguid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string UnitName = 3;
 * @return {string}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.prototype.getUnitname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter} returns this
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.prototype.setUnitname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional UnitNetworkCounter UnitNetworkCounter = 4;
 * @return {?proto.Protocol.UnitNetworkCounter}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.prototype.getUnitnetworkcounter = function() {
  return /** @type{?proto.Protocol.UnitNetworkCounter} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.UnitNetworkCounter, 4));
};


/**
 * @param {?proto.Protocol.UnitNetworkCounter|undefined} value
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter} returns this
*/
proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.prototype.setUnitnetworkcounter = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter} returns this
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.prototype.clearUnitnetworkcounter = function() {
  return this.setUnitnetworkcounter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.WebSocketServerResponseFetchUnitStatusNetworkCounter.prototype.hasUnitnetworkcounter = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.Protocol);
